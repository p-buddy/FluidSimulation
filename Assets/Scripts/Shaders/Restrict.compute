#pragma kernel Restrict
#define NUM_THREADS 2
#include "Include/SampleScalarField.hlsl"

RWStructuredBuffer<float> RestrictedGrid;
uint RestrictedGridSizeX;
uint RestrictedGridSizeXByY;

uint GetRestrictedIndex1D(uint3 index3D)
{
    return index3D.x + index3D.y * RestrictedGridSizeX + index3D.z * RestrictedGridSizeXByY;
}

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void Restrict (uint3 globalThreadIndex : SV_DispatchThreadID)
{
    const float scaledIndex = globalThreadIndex * 2;
    const float sum = ScalarFieldToSample[GetIndex1D(scaledIndex)] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(1,0,0))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(1,1,0))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(1,0,1))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(0,1,0))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(0,1,1))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(0,0,1))] +
        ScalarFieldToSample[GetIndex1D(scaledIndex + uint3(1,1,1))];

    RestrictedGrid[globalThreadIndex] = sum / 8;
}
